#pragma once
#include <Arduino.h>

namespace config {
static const char index_html[] PROGMEM =
    R"(<!DOCTYPE html><html><head> <meta charset='utf-8'> <meta http-equiv='X-UA-Compatible' content='IE=edge'> <title>Device Configuration</title> <meta name='viewport' content='width=device-width, initial-scale=1'> <link rel="stylesheet" href="config.css"></head><body> <form id="deviceConfigurationForm"> <h1>Device Configuration</h1> <fieldset> <legend>General</legend> <div><label for="deviceID">Device ID: <abbr title="required" aria-label="required">*</abbr></label><input type="text" name="deviceID" id="deviceID" autofocus="true" required><span></span> </div></fieldset> <fieldset> <legend>WIFI</legend> <div><label for="wifiSSID">SSID: <abbr title="required" aria-label="required">*</abbr></label><input type="text" name="wifiSSID" id="wifiSSID" list="wifiNetworks" required><span></span><datalist id="wifiNetworks"> </datalist></div><div><label for="wifiPassword">Password: <abbr title="required" aria-label="required">*</abbr></label><input type="password" name="wifiPassword" id="wifiPassword" required><span></span> </div></fieldset> <fieldset> <legend>MQTT</legend> <div><label for="mqttServer">Server:<abbr title="required" aria-label="required">*</abbr></label><input type="text" name="mqttServer" id="mqttServer" required><span></span></div><div><label for="mqttPort">Port: <abbr title="required" aria-label="required">*</abbr></label><input type="number" name="mqttPort" id="mqttPort" required><span></span></div><div><label for="mqttUsername">Username:</label><input type="text" name="mqttUsername" id="mqttUsername" placeholder="Blank For Anonymous"></div><div><label for="mqttPassword">Password: </label><input type="password" name="mqttPassword" id="mqttPassword" placeholder="Blank For Anonymous"></div></fieldset> <div class="button"><button onclick="load_networks();" id="refreshNetworkButton" type="button">Refresh Networks</button><button type="submit">Update</button></div></form> <div id="resultsModal" class="modal"> <div class="modal-content"> <span class="close">&times;</span> <h1>Device Status</h1> <p id="resultsOutput"></p></div></div><script src="config.js"></script></body></html>)";
static const char config_css[] PROGMEM =
    R"(body{font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif; font-size: small;}h1{margin: 0; text-align: center;}form{margin: 0 auto; width: 500px; padding: 1em; border: 1px solid #ccc; border-radius: 1em;}form div + div{margin-top: 1em;}label{display: inline-block; width: 90px; text-align: right; margin-right: 1em;}legend{font-weight: bold;}input{font-size: 1em; width: 300px; box-sizing: border-box; border: 1px solid #999; box-shadow: inset 1px 1px 3px #ccc; border-radius: 5px;}input:required{border: 1px solid black;}input:optional{border: 1px solid silver;}input:focus{border-color: #000;}input + span{position: relative;}input + span::before{position: absolute; right: -20px; top: 5px;}input:invalid{border: 2px solid red;}input:invalid + span::before{content: "✖"; color: red;}input:valid + span::before{content: "✓"; color: green;}.button{margin-top: 1em; display: flex; justify-content: flex-end;}button{margin-left: 0.5em; display: block; box-sizing: border-box; border-radius: 5px; background: linear-gradient(to bottom, #eee, #ccc);}button:hover{background: linear-gradient(to bottom, #fff, #ddd);}.modal{display: none; position: fixed; z-index: 1; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgb(0, 0, 0); background-color: rgba(0, 0, 0, 0.4);}.modal-content{background-color: #fefefe; margin: 15% auto; padding: 20px; border: 1px solid #888; width: 400px; text-align: center;}.close{color: #aaa; float: right; font-size: 28px; font-weight: bold;}.close:hover,.close:focus{color: black; text-decoration: none; cursor: pointer;})";
static const char config_js[] PROGMEM =
    R"(function load_networks(){fetch("/networks").then(e=>e.json()).then(e=>{wifiNetworks=document.getElementById("wifiNetworks"),wifiNetworks.textContent="",e.forEach(e=>{let t=document.createElement("option");t.value=e,wifiNetworks.appendChild(t)})}).catch(e=>{throw e})}function load_values(){fetch("/values").then(e=>e.json()).then(e=>{for(var t of Object.keys(e))document.getElementById(t).value=e[t]}).catch(e=>{throw e})}const resultsModal=document.getElementById("resultsModal");function showResultsModal(){resultsModal.style.display="block"}document.getElementsByClassName("close")[0].onclick=function(){resultsModal.style.display="none"},window.onclick=function(e){e.target==resultsModal&&(resultsModal.style.display="none")},window.addEventListener("load",function(){const e=document.getElementById("deviceConfigurationForm");e.addEventListener("submit",function(t){t.preventDefault(),function(){const t=new FormData(e);var n=new Map;t.forEach((e,t)=>{n[t]=e}),fetch("/update",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)}).then(e=>e.json()).then(e=>{document.getElementById("resultsOutput").textContent=e.message,showResultsModal()}).catch(e=>{document.getElementById("resultsOutput").textContent="Unexpected error while configuring device.",console.log(e),showResultsModal()})}()})}),load_values(),load_networks();)";
}  // namespace config
